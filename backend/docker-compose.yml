#version: '3.8'
services:
  postgres:
    image: postgres
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: scheduler
    ports:
      - "5432:5432"
    volumes:
      - ./notifications-service/notifications-service-init-db.sql:/docker-entrypoint-initdb.d/notifications-service-init-db.sql
      - ./api-service/api-service-init-db.sql:/docker-entrypoint-initdb.d/api-service-init-db.sql

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"  # AMQP protocol port (for app connection)
      - "15672:15672" # Management UI (for web access)

  notifications-service:
    build: ./notifications-service
    container_name: notifications-service
    depends_on:
      - postgres
      - rabbitmq
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/scheduler
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
      JAVA_TOOL_OPTIONS: "-Djavax.net.ssl.trustStore=/etc/ssl/cacerts -Djavax.net.ssl.trustStorePassword=changeit"
    ports:
      - "8081:8081"
    volumes:
      - ./certs:/etc/ssl
#    volumes:
#      - ./certs/cacerts:/etc/ssl/cacerts

  api-service:
    build: ./api-service
    container_name: api_service
    #    restart: always
    depends_on:
      - postgres
      - rabbitmq
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/scheduler
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
    ports:
      - "8080:8080"
